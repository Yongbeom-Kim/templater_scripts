// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test list.testcase.ts should parse "{"description": "Parse nested list of items", "input": "- Front - Back
  - Front = Back
1. Front - Back
  1. Front = Back
  2. Front = Back", "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  ListNode {
    "children": [],
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 2,
            "lexeme": "Front",
            "line_pos": 1,
            "type": "text",
          },
          {
            "col_pos": 7,
            "lexeme": " ",
            "line_pos": 1,
            "type": "whitespace",
          },
          {
            "col_pos": 8,
            "lexeme": "-",
            "line_pos": 1,
            "type": "punctuation",
          },
          {
            "col_pos": 9,
            "lexeme": " ",
            "line_pos": 1,
            "type": "whitespace",
          },
          {
            "col_pos": 10,
            "lexeme": "Back",
            "line_pos": 1,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 14,
      "lexeme": "
",
      "line_pos": 1,
      "type": "newline",
    },
    "indent_level": 0,
    "marker": [
      {
        "col_pos": 0,
        "lexeme": "-",
        "line_pos": 1,
        "type": "punctuation",
      },
    ],
    "ordered": false,
    "type": "list",
  },
  ListNode {
    "children": [],
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 4,
            "lexeme": "Front",
            "line_pos": 2,
            "type": "text",
          },
          {
            "col_pos": 9,
            "lexeme": " ",
            "line_pos": 2,
            "type": "whitespace",
          },
          {
            "col_pos": 10,
            "lexeme": "=",
            "line_pos": 2,
            "type": "punctuation",
          },
          {
            "col_pos": 11,
            "lexeme": " ",
            "line_pos": 2,
            "type": "whitespace",
          },
          {
            "col_pos": 12,
            "lexeme": "Back",
            "line_pos": 2,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 16,
      "lexeme": "
",
      "line_pos": 2,
      "type": "newline",
    },
    "indent_level": 1,
    "marker": [
      {
        "col_pos": 2,
        "lexeme": "-",
        "line_pos": 2,
        "type": "punctuation",
      },
    ],
    "ordered": false,
    "type": "list",
  },
  ListNode {
    "children": [],
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 3,
            "lexeme": "Front",
            "line_pos": 3,
            "type": "text",
          },
          {
            "col_pos": 8,
            "lexeme": " ",
            "line_pos": 3,
            "type": "whitespace",
          },
          {
            "col_pos": 9,
            "lexeme": "-",
            "line_pos": 3,
            "type": "punctuation",
          },
          {
            "col_pos": 10,
            "lexeme": " ",
            "line_pos": 3,
            "type": "whitespace",
          },
          {
            "col_pos": 11,
            "lexeme": "Back",
            "line_pos": 3,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 15,
      "lexeme": "
",
      "line_pos": 3,
      "type": "newline",
    },
    "indent_level": 0,
    "marker": [
      {
        "col_pos": 0,
        "lexeme": "1",
        "line_pos": 3,
        "type": "number",
      },
      {
        "col_pos": 1,
        "lexeme": ".",
        "line_pos": 3,
        "type": "punctuation",
      },
    ],
    "ordered": true,
    "type": "list",
  },
  ListNode {
    "children": [],
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 5,
            "lexeme": "Front",
            "line_pos": 4,
            "type": "text",
          },
          {
            "col_pos": 10,
            "lexeme": " ",
            "line_pos": 4,
            "type": "whitespace",
          },
          {
            "col_pos": 11,
            "lexeme": "=",
            "line_pos": 4,
            "type": "punctuation",
          },
          {
            "col_pos": 12,
            "lexeme": " ",
            "line_pos": 4,
            "type": "whitespace",
          },
          {
            "col_pos": 13,
            "lexeme": "Back",
            "line_pos": 4,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 17,
      "lexeme": "
",
      "line_pos": 4,
      "type": "newline",
    },
    "indent_level": 1,
    "marker": [
      {
        "col_pos": 2,
        "lexeme": "1",
        "line_pos": 4,
        "type": "number",
      },
      {
        "col_pos": 3,
        "lexeme": ".",
        "line_pos": 4,
        "type": "punctuation",
      },
    ],
    "ordered": true,
    "type": "list",
  },
  ListNode {
    "children": [],
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 5,
            "lexeme": "Front",
            "line_pos": 5,
            "type": "text",
          },
          {
            "col_pos": 10,
            "lexeme": " ",
            "line_pos": 5,
            "type": "whitespace",
          },
          {
            "col_pos": 11,
            "lexeme": "=",
            "line_pos": 5,
            "type": "punctuation",
          },
          {
            "col_pos": 12,
            "lexeme": " ",
            "line_pos": 5,
            "type": "whitespace",
          },
          {
            "col_pos": 13,
            "lexeme": "Back",
            "line_pos": 5,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": undefined,
    "indent_level": 1,
    "marker": [
      {
        "col_pos": 2,
        "lexeme": "2",
        "line_pos": 5,
        "type": "number",
      },
      {
        "col_pos": 3,
        "lexeme": ".",
        "line_pos": 5,
        "type": "punctuation",
      },
    ],
    "ordered": true,
    "type": "list",
  },
]
`;

exports[`test text.testcase.ts should parse "{"description": "Mixed whitespace and newlines", "input": " 	 
 	 ", "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 3,
      "lexeme": "
",
      "line_pos": 1,
      "type": "newline",
    },
    "indent_level": 2,
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [],
        "type": "text",
      },
    ],
    "endingNewline": undefined,
    "indent_level": 2,
    "type": "text",
  },
]
`;

exports[`test text.testcase.ts should parse "{"description": "Multiple newlines", "input": "

", "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 0,
      "lexeme": "

",
      "line_pos": 1,
      "type": "newline",
    },
    "indent_level": 0,
    "type": "text",
  },
]
`;

exports[`test text.testcase.ts should parse "{"description": "Simple text with newline", "input": "Hello 123
World", "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 0,
            "lexeme": "Hello",
            "line_pos": 1,
            "type": "text",
          },
          {
            "col_pos": 5,
            "lexeme": " ",
            "line_pos": 1,
            "type": "whitespace",
          },
          {
            "col_pos": 6,
            "lexeme": "123",
            "line_pos": 1,
            "type": "number",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 9,
      "lexeme": "
",
      "line_pos": 1,
      "type": "newline",
    },
    "indent_level": 0,
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 0,
            "lexeme": "World",
            "line_pos": 2,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": undefined,
    "indent_level": 0,
    "type": "text",
  },
]
`;

exports[`test text.testcase.ts should parse "{"description": "Simple text with numbers", "input": "123 456", "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 0,
            "lexeme": "123",
            "line_pos": 1,
            "type": "number",
          },
          {
            "col_pos": 3,
            "lexeme": " ",
            "line_pos": 1,
            "type": "whitespace",
          },
          {
            "col_pos": 4,
            "lexeme": "456",
            "line_pos": 1,
            "type": "number",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": undefined,
    "indent_level": 0,
    "type": "text",
  },
]
`;

exports[`test text.testcase.ts should parse "{"description": "Text with mixed whitespace and newlines", "input": "Hello 123
 	World
456", "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 0,
            "lexeme": "Hello",
            "line_pos": 1,
            "type": "text",
          },
          {
            "col_pos": 5,
            "lexeme": " ",
            "line_pos": 1,
            "type": "whitespace",
          },
          {
            "col_pos": 6,
            "lexeme": "123",
            "line_pos": 1,
            "type": "number",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 9,
      "lexeme": "
",
      "line_pos": 1,
      "type": "newline",
    },
    "indent_level": 0,
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 2,
            "lexeme": "World",
            "line_pos": 2,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 7,
      "lexeme": "
",
      "line_pos": 2,
      "type": "newline",
    },
    "indent_level": 2,
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 0,
            "lexeme": "456",
            "line_pos": 3,
            "type": "number",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": undefined,
    "indent_level": 0,
    "type": "text",
  },
]
`;

exports[`test text.testcase.ts should parse "{"description": "Text with multiple newlines", "input": "Multiple


Newlines


", "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 0,
            "lexeme": "Multiple",
            "line_pos": 1,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 8,
      "lexeme": "


",
      "line_pos": 1,
      "type": "newline",
    },
    "indent_level": 0,
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 0,
            "lexeme": "Newlines",
            "line_pos": 4,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 8,
      "lexeme": "


",
      "line_pos": 4,
      "type": "newline",
    },
    "indent_level": 0,
    "type": "text",
  },
]
`;

exports[`test text.testcase.ts should parse "{"description": "Whitespace characters", "input": " 	 ", "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [],
        "type": "text",
      },
    ],
    "endingNewline": undefined,
    "indent_level": 2,
    "type": "text",
  },
]
`;
