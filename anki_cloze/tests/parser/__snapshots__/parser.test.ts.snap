// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test code_block.testcase.ts should parse "{"clozify_expect": [Function clozify_expect], "description": "Basic C++ code block with clozes (4-space indent)", "input": "\`\`\`cpp
/* multi-line comment */
#include <iostream>

int main() {
    // This is a simple C++ program
    std::cout << \\"Hello, world!\\" << std::endl;
    return 0;
  
}
\`\`\`", "main_expect": [Function main_expect], "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  CodeBlockNode {
    "contents": [
      CodeCommentNode {
        "contents": [
          TextNode {
            "contents": [
              {
                "col_pos": 0,
                "lexeme": "/*",
                "line_pos": 2,
                "type": "punctuation",
              },
              {
                "col_pos": 2,
                "lexeme": " ",
                "line_pos": 2,
                "type": "whitespace",
              },
              {
                "col_pos": 3,
                "lexeme": "multi",
                "line_pos": 2,
                "type": "text",
              },
              {
                "col_pos": 8,
                "lexeme": "-",
                "line_pos": 2,
                "type": "punctuation",
              },
              {
                "col_pos": 9,
                "lexeme": "line",
                "line_pos": 2,
                "type": "text",
              },
              {
                "col_pos": 13,
                "lexeme": " ",
                "line_pos": 2,
                "type": "whitespace",
              },
              {
                "col_pos": 14,
                "lexeme": "comment",
                "line_pos": 2,
                "type": "text",
              },
              {
                "col_pos": 21,
                "lexeme": " ",
                "line_pos": 2,
                "type": "whitespace",
              },
              {
                "col_pos": 22,
                "lexeme": "*/",
                "line_pos": 2,
                "type": "punctuation",
              },
            ],
            "type": "text",
          },
        ],
        "endingNewline": {
          "col_pos": 24,
          "lexeme": "
",
          "line_pos": 2,
          "type": "newline",
        },
        "indent": IndentNode {
          "indent": undefined,
          "type": "indent",
        },
        "type": "code_comment",
      },
      CodeLineNode {
        "contents": [
          TextNode {
            "contents": [
              {
                "col_pos": 0,
                "lexeme": "#",
                "line_pos": 3,
                "type": "punctuation",
              },
              {
                "col_pos": 1,
                "lexeme": "include",
                "line_pos": 3,
                "type": "text",
              },
              {
                "col_pos": 8,
                "lexeme": " ",
                "line_pos": 3,
                "type": "whitespace",
              },
              {
                "col_pos": 9,
                "lexeme": "<",
                "line_pos": 3,
                "type": "punctuation",
              },
              {
                "col_pos": 10,
                "lexeme": "iostream",
                "line_pos": 3,
                "type": "text",
              },
              {
                "col_pos": 18,
                "lexeme": ">",
                "line_pos": 3,
                "type": "punctuation",
              },
            ],
            "type": "text",
          },
        ],
        "endingNewline": {
          "col_pos": 19,
          "lexeme": "
",
          "line_pos": 3,
          "type": "newline",
        },
        "indent": IndentNode {
          "indent": undefined,
          "type": "indent",
        },
        "type": "code_line",
      },
      CodeLineNode {
        "contents": [
          TextNode {
            "contents": [],
            "type": "text",
          },
        ],
        "endingNewline": {
          "col_pos": 0,
          "lexeme": "
",
          "line_pos": 4,
          "type": "newline",
        },
        "indent": IndentNode {
          "indent": undefined,
          "type": "indent",
        },
        "type": "code_line",
      },
      CodeLineNode {
        "contents": [
          TextNode {
            "contents": [
              {
                "col_pos": 0,
                "lexeme": "int",
                "line_pos": 5,
                "type": "text",
              },
              {
                "col_pos": 3,
                "lexeme": " ",
                "line_pos": 5,
                "type": "whitespace",
              },
              {
                "col_pos": 4,
                "lexeme": "main",
                "line_pos": 5,
                "type": "text",
              },
              {
                "col_pos": 8,
                "lexeme": "()",
                "line_pos": 5,
                "type": "punctuation",
              },
              {
                "col_pos": 10,
                "lexeme": " ",
                "line_pos": 5,
                "type": "whitespace",
              },
              {
                "col_pos": 11,
                "lexeme": "{",
                "line_pos": 5,
                "type": "punctuation",
              },
            ],
            "type": "text",
          },
        ],
        "endingNewline": {
          "col_pos": 12,
          "lexeme": "
",
          "line_pos": 5,
          "type": "newline",
        },
        "indent": IndentNode {
          "indent": undefined,
          "type": "indent",
        },
        "type": "code_line",
      },
      CodeCommentNode {
        "contents": [
          TextNode {
            "contents": [
              {
                "col_pos": 4,
                "lexeme": "//",
                "line_pos": 6,
                "type": "punctuation",
              },
              {
                "col_pos": 6,
                "lexeme": " ",
                "line_pos": 6,
                "type": "whitespace",
              },
              {
                "col_pos": 7,
                "lexeme": "This",
                "line_pos": 6,
                "type": "text",
              },
              {
                "col_pos": 11,
                "lexeme": " ",
                "line_pos": 6,
                "type": "whitespace",
              },
              {
                "col_pos": 12,
                "lexeme": "is",
                "line_pos": 6,
                "type": "text",
              },
              {
                "col_pos": 14,
                "lexeme": " ",
                "line_pos": 6,
                "type": "whitespace",
              },
              {
                "col_pos": 15,
                "lexeme": "a",
                "line_pos": 6,
                "type": "text",
              },
              {
                "col_pos": 16,
                "lexeme": " ",
                "line_pos": 6,
                "type": "whitespace",
              },
              {
                "col_pos": 17,
                "lexeme": "simple",
                "line_pos": 6,
                "type": "text",
              },
              {
                "col_pos": 23,
                "lexeme": " ",
                "line_pos": 6,
                "type": "whitespace",
              },
              {
                "col_pos": 24,
                "lexeme": "C",
                "line_pos": 6,
                "type": "text",
              },
              {
                "col_pos": 25,
                "lexeme": "++",
                "line_pos": 6,
                "type": "punctuation",
              },
              {
                "col_pos": 27,
                "lexeme": " ",
                "line_pos": 6,
                "type": "whitespace",
              },
              {
                "col_pos": 28,
                "lexeme": "program",
                "line_pos": 6,
                "type": "text",
              },
            ],
            "type": "text",
          },
        ],
        "endingNewline": {
          "col_pos": 35,
          "lexeme": "
",
          "line_pos": 6,
          "type": "newline",
        },
        "indent": IndentNode {
          "indent": {
            "col_pos": 0,
            "lexeme": "    ",
            "line_pos": 6,
            "type": "whitespace",
          },
          "type": "indent",
        },
        "type": "code_comment",
      },
      CodeLineNode {
        "contents": [
          TextNode {
            "contents": [
              {
                "col_pos": 4,
                "lexeme": "std",
                "line_pos": 7,
                "type": "text",
              },
              {
                "col_pos": 7,
                "lexeme": "::",
                "line_pos": 7,
                "type": "punctuation",
              },
              {
                "col_pos": 9,
                "lexeme": "cout",
                "line_pos": 7,
                "type": "text",
              },
              {
                "col_pos": 13,
                "lexeme": " ",
                "line_pos": 7,
                "type": "whitespace",
              },
              {
                "col_pos": 14,
                "lexeme": "<<",
                "line_pos": 7,
                "type": "punctuation",
              },
              {
                "col_pos": 16,
                "lexeme": " ",
                "line_pos": 7,
                "type": "whitespace",
              },
              {
                "col_pos": 17,
                "lexeme": """,
                "line_pos": 7,
                "type": "punctuation",
              },
              {
                "col_pos": 18,
                "lexeme": "Hello",
                "line_pos": 7,
                "type": "text",
              },
              {
                "col_pos": 23,
                "lexeme": ",",
                "line_pos": 7,
                "type": "punctuation",
              },
              {
                "col_pos": 24,
                "lexeme": " ",
                "line_pos": 7,
                "type": "whitespace",
              },
              {
                "col_pos": 25,
                "lexeme": "world",
                "line_pos": 7,
                "type": "text",
              },
              {
                "col_pos": 30,
                "lexeme": "!"",
                "line_pos": 7,
                "type": "punctuation",
              },
              {
                "col_pos": 32,
                "lexeme": " ",
                "line_pos": 7,
                "type": "whitespace",
              },
              {
                "col_pos": 33,
                "lexeme": "<<",
                "line_pos": 7,
                "type": "punctuation",
              },
              {
                "col_pos": 35,
                "lexeme": " ",
                "line_pos": 7,
                "type": "whitespace",
              },
              {
                "col_pos": 36,
                "lexeme": "std",
                "line_pos": 7,
                "type": "text",
              },
              {
                "col_pos": 39,
                "lexeme": "::",
                "line_pos": 7,
                "type": "punctuation",
              },
              {
                "col_pos": 41,
                "lexeme": "endl",
                "line_pos": 7,
                "type": "text",
              },
              {
                "col_pos": 45,
                "lexeme": ";",
                "line_pos": 7,
                "type": "punctuation",
              },
            ],
            "type": "text",
          },
        ],
        "endingNewline": {
          "col_pos": 46,
          "lexeme": "
",
          "line_pos": 7,
          "type": "newline",
        },
        "indent": IndentNode {
          "indent": {
            "col_pos": 0,
            "lexeme": "    ",
            "line_pos": 7,
            "type": "whitespace",
          },
          "type": "indent",
        },
        "type": "code_line",
      },
      CodeLineNode {
        "contents": [
          TextNode {
            "contents": [
              {
                "col_pos": 4,
                "lexeme": "return",
                "line_pos": 8,
                "type": "text",
              },
              {
                "col_pos": 10,
                "lexeme": " ",
                "line_pos": 8,
                "type": "whitespace",
              },
              {
                "col_pos": 11,
                "lexeme": "0",
                "line_pos": 8,
                "type": "number",
              },
              {
                "col_pos": 12,
                "lexeme": ";",
                "line_pos": 8,
                "type": "punctuation",
              },
            ],
            "type": "text",
          },
        ],
        "endingNewline": {
          "col_pos": 13,
          "lexeme": "
",
          "line_pos": 8,
          "type": "newline",
        },
        "indent": IndentNode {
          "indent": {
            "col_pos": 0,
            "lexeme": "    ",
            "line_pos": 8,
            "type": "whitespace",
          },
          "type": "indent",
        },
        "type": "code_line",
      },
      CodeLineNode {
        "contents": [
          TextNode {
            "contents": [],
            "type": "text",
          },
        ],
        "endingNewline": {
          "col_pos": 2,
          "lexeme": "
",
          "line_pos": 9,
          "type": "newline",
        },
        "indent": IndentNode {
          "indent": {
            "col_pos": 0,
            "lexeme": "  ",
            "line_pos": 9,
            "type": "whitespace",
          },
          "type": "indent",
        },
        "type": "code_line",
      },
      CodeLineNode {
        "contents": [
          TextNode {
            "contents": [
              {
                "col_pos": 0,
                "lexeme": "}",
                "line_pos": 10,
                "type": "punctuation",
              },
            ],
            "type": "text",
          },
        ],
        "endingNewline": {
          "col_pos": 1,
          "lexeme": "
",
          "line_pos": 10,
          "type": "newline",
        },
        "indent": IndentNode {
          "indent": undefined,
          "type": "indent",
        },
        "type": "code_line",
      },
    ],
    "language": "c++",
    "language_str": "cpp",
    "type": "code_block",
  },
]
`;

exports[`test code_block.testcase.ts should parse "{"clozify_expect": [Function clozify_expect], "description": "Basic python code block, no clozes", "input": "\`\`\`python
def x():
  print(\\"Hello, world!\\")
  # Comment
\`\`\`", "main_expect": [Function main_expect], "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  CodeBlockNode {
    "contents": [
      CodeLineNode {
        "contents": [
          TextNode {
            "contents": [
              {
                "col_pos": 0,
                "lexeme": "def",
                "line_pos": 2,
                "type": "text",
              },
              {
                "col_pos": 3,
                "lexeme": " ",
                "line_pos": 2,
                "type": "whitespace",
              },
              {
                "col_pos": 4,
                "lexeme": "x",
                "line_pos": 2,
                "type": "text",
              },
              {
                "col_pos": 5,
                "lexeme": "():",
                "line_pos": 2,
                "type": "punctuation",
              },
            ],
            "type": "text",
          },
        ],
        "endingNewline": {
          "col_pos": 8,
          "lexeme": "
",
          "line_pos": 2,
          "type": "newline",
        },
        "indent": IndentNode {
          "indent": undefined,
          "type": "indent",
        },
        "type": "code_line",
      },
      CodeLineNode {
        "contents": [
          TextNode {
            "contents": [
              {
                "col_pos": 2,
                "lexeme": "print",
                "line_pos": 3,
                "type": "text",
              },
              {
                "col_pos": 7,
                "lexeme": "("",
                "line_pos": 3,
                "type": "punctuation",
              },
              {
                "col_pos": 9,
                "lexeme": "Hello",
                "line_pos": 3,
                "type": "text",
              },
              {
                "col_pos": 14,
                "lexeme": ",",
                "line_pos": 3,
                "type": "punctuation",
              },
              {
                "col_pos": 15,
                "lexeme": " ",
                "line_pos": 3,
                "type": "whitespace",
              },
              {
                "col_pos": 16,
                "lexeme": "world",
                "line_pos": 3,
                "type": "text",
              },
              {
                "col_pos": 21,
                "lexeme": "!")",
                "line_pos": 3,
                "type": "punctuation",
              },
            ],
            "type": "text",
          },
        ],
        "endingNewline": {
          "col_pos": 24,
          "lexeme": "
",
          "line_pos": 3,
          "type": "newline",
        },
        "indent": IndentNode {
          "indent": {
            "col_pos": 0,
            "lexeme": "  ",
            "line_pos": 3,
            "type": "whitespace",
          },
          "type": "indent",
        },
        "type": "code_line",
      },
      CodeCommentNode {
        "contents": [
          TextNode {
            "contents": [
              {
                "col_pos": 2,
                "lexeme": "#",
                "line_pos": 4,
                "type": "punctuation",
              },
              {
                "col_pos": 3,
                "lexeme": " ",
                "line_pos": 4,
                "type": "whitespace",
              },
              {
                "col_pos": 4,
                "lexeme": "Comment",
                "line_pos": 4,
                "type": "text",
              },
            ],
            "type": "text",
          },
        ],
        "endingNewline": {
          "col_pos": 11,
          "lexeme": "
",
          "line_pos": 4,
          "type": "newline",
        },
        "indent": IndentNode {
          "indent": {
            "col_pos": 0,
            "lexeme": "  ",
            "line_pos": 4,
            "type": "whitespace",
          },
          "type": "indent",
        },
        "type": "code_comment",
      },
    ],
    "language": "python",
    "language_str": "python",
    "type": "code_block",
  },
]
`;

exports[`test list.testcase.ts should parse "{"clozify_expect": [Function clozify_expect], "description": "Parse nested list of items", "input": "- Front - Back
  - Front = Back
1. Front - Back
  1. Front = Back
  2. Front = Back", "main_expect": [Function main_expect], "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  ListNode {
    "children": [],
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 2,
            "lexeme": "Front",
            "line_pos": 1,
            "type": "text",
          },
          {
            "col_pos": 7,
            "lexeme": " ",
            "line_pos": 1,
            "type": "whitespace",
          },
          {
            "col_pos": 8,
            "lexeme": "-",
            "line_pos": 1,
            "type": "punctuation",
          },
          {
            "col_pos": 9,
            "lexeme": " ",
            "line_pos": 1,
            "type": "whitespace",
          },
          {
            "col_pos": 10,
            "lexeme": "Back",
            "line_pos": 1,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 14,
      "lexeme": "
",
      "line_pos": 1,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "marker": [
      {
        "col_pos": 0,
        "lexeme": "-",
        "line_pos": 1,
        "type": "punctuation",
      },
    ],
    "ordered": false,
    "type": "list",
  },
  ListNode {
    "children": [],
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 4,
            "lexeme": "Front",
            "line_pos": 2,
            "type": "text",
          },
          {
            "col_pos": 9,
            "lexeme": " ",
            "line_pos": 2,
            "type": "whitespace",
          },
          {
            "col_pos": 10,
            "lexeme": "=",
            "line_pos": 2,
            "type": "punctuation",
          },
          {
            "col_pos": 11,
            "lexeme": " ",
            "line_pos": 2,
            "type": "whitespace",
          },
          {
            "col_pos": 12,
            "lexeme": "Back",
            "line_pos": 2,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 16,
      "lexeme": "
",
      "line_pos": 2,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": {
        "col_pos": 0,
        "lexeme": "  ",
        "line_pos": 2,
        "type": "whitespace",
      },
      "type": "indent",
    },
    "marker": [
      {
        "col_pos": 2,
        "lexeme": "-",
        "line_pos": 2,
        "type": "punctuation",
      },
    ],
    "ordered": false,
    "type": "list",
  },
  ListNode {
    "children": [],
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 3,
            "lexeme": "Front",
            "line_pos": 3,
            "type": "text",
          },
          {
            "col_pos": 8,
            "lexeme": " ",
            "line_pos": 3,
            "type": "whitespace",
          },
          {
            "col_pos": 9,
            "lexeme": "-",
            "line_pos": 3,
            "type": "punctuation",
          },
          {
            "col_pos": 10,
            "lexeme": " ",
            "line_pos": 3,
            "type": "whitespace",
          },
          {
            "col_pos": 11,
            "lexeme": "Back",
            "line_pos": 3,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 15,
      "lexeme": "
",
      "line_pos": 3,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "marker": [
      {
        "col_pos": 0,
        "lexeme": "1",
        "line_pos": 3,
        "type": "number",
      },
      {
        "col_pos": 1,
        "lexeme": ".",
        "line_pos": 3,
        "type": "punctuation",
      },
    ],
    "ordered": true,
    "type": "list",
  },
  ListNode {
    "children": [],
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 5,
            "lexeme": "Front",
            "line_pos": 4,
            "type": "text",
          },
          {
            "col_pos": 10,
            "lexeme": " ",
            "line_pos": 4,
            "type": "whitespace",
          },
          {
            "col_pos": 11,
            "lexeme": "=",
            "line_pos": 4,
            "type": "punctuation",
          },
          {
            "col_pos": 12,
            "lexeme": " ",
            "line_pos": 4,
            "type": "whitespace",
          },
          {
            "col_pos": 13,
            "lexeme": "Back",
            "line_pos": 4,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 17,
      "lexeme": "
",
      "line_pos": 4,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": {
        "col_pos": 0,
        "lexeme": "  ",
        "line_pos": 4,
        "type": "whitespace",
      },
      "type": "indent",
    },
    "marker": [
      {
        "col_pos": 2,
        "lexeme": "1",
        "line_pos": 4,
        "type": "number",
      },
      {
        "col_pos": 3,
        "lexeme": ".",
        "line_pos": 4,
        "type": "punctuation",
      },
    ],
    "ordered": true,
    "type": "list",
  },
  ListNode {
    "children": [],
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 5,
            "lexeme": "Front",
            "line_pos": 5,
            "type": "text",
          },
          {
            "col_pos": 10,
            "lexeme": " ",
            "line_pos": 5,
            "type": "whitespace",
          },
          {
            "col_pos": 11,
            "lexeme": "=",
            "line_pos": 5,
            "type": "punctuation",
          },
          {
            "col_pos": 12,
            "lexeme": " ",
            "line_pos": 5,
            "type": "whitespace",
          },
          {
            "col_pos": 13,
            "lexeme": "Back",
            "line_pos": 5,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": undefined,
    "indent": IndentNode {
      "indent": {
        "col_pos": 0,
        "lexeme": "  ",
        "line_pos": 5,
        "type": "whitespace",
      },
      "type": "indent",
    },
    "marker": [
      {
        "col_pos": 2,
        "lexeme": "2",
        "line_pos": 5,
        "type": "number",
      },
      {
        "col_pos": 3,
        "lexeme": ".",
        "line_pos": 5,
        "type": "punctuation",
      },
    ],
    "ordered": true,
    "type": "list",
  },
]
`;

exports[`test text.testcase.ts should parse "{"clozify_expect": [Function clozify_expect], "description": "Mixed whitespace and newlines", "input": " 	 
 	 ", "main_expect": [Function main_expect], "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 3,
      "lexeme": "
",
      "line_pos": 1,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": {
        "col_pos": 0,
        "lexeme": " 	 ",
        "line_pos": 1,
        "type": "whitespace",
      },
      "type": "indent",
    },
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [],
        "type": "text",
      },
    ],
    "endingNewline": undefined,
    "indent": IndentNode {
      "indent": {
        "col_pos": 0,
        "lexeme": " 	 ",
        "line_pos": 2,
        "type": "whitespace",
      },
      "type": "indent",
    },
    "type": "text",
  },
]
`;

exports[`test text.testcase.ts should parse "{"clozify_expect": [Function clozify_expect], "description": "Multiple newlines", "input": "

", "main_expect": [Function main_expect], "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 0,
      "lexeme": "
",
      "line_pos": 1,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 0,
      "lexeme": "
",
      "line_pos": 2,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "type": "text",
  },
]
`;

exports[`test text.testcase.ts should parse "{"clozify_expect": [Function clozify_expect], "description": "Simple text with newline", "input": "Hello 123
World", "main_expect": [Function main_expect], "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 0,
            "lexeme": "Hello",
            "line_pos": 1,
            "type": "text",
          },
          {
            "col_pos": 5,
            "lexeme": " ",
            "line_pos": 1,
            "type": "whitespace",
          },
          {
            "col_pos": 6,
            "lexeme": "123",
            "line_pos": 1,
            "type": "number",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 9,
      "lexeme": "
",
      "line_pos": 1,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 0,
            "lexeme": "World",
            "line_pos": 2,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": undefined,
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "type": "text",
  },
]
`;

exports[`test text.testcase.ts should parse "{"clozify_expect": [Function clozify_expect], "description": "Simple text with numbers", "input": "123 456", "main_expect": [Function main_expect], "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 0,
            "lexeme": "123",
            "line_pos": 1,
            "type": "number",
          },
          {
            "col_pos": 3,
            "lexeme": " ",
            "line_pos": 1,
            "type": "whitespace",
          },
          {
            "col_pos": 4,
            "lexeme": "456",
            "line_pos": 1,
            "type": "number",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": undefined,
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "type": "text",
  },
]
`;

exports[`test text.testcase.ts should parse "{"clozify_expect": [Function clozify_expect], "description": "Text with mixed whitespace and newlines", "input": "Hello 123
 	World
456", "main_expect": [Function main_expect], "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 0,
            "lexeme": "Hello",
            "line_pos": 1,
            "type": "text",
          },
          {
            "col_pos": 5,
            "lexeme": " ",
            "line_pos": 1,
            "type": "whitespace",
          },
          {
            "col_pos": 6,
            "lexeme": "123",
            "line_pos": 1,
            "type": "number",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 9,
      "lexeme": "
",
      "line_pos": 1,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 2,
            "lexeme": "World",
            "line_pos": 2,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 7,
      "lexeme": "
",
      "line_pos": 2,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": {
        "col_pos": 0,
        "lexeme": " 	",
        "line_pos": 2,
        "type": "whitespace",
      },
      "type": "indent",
    },
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 0,
            "lexeme": "456",
            "line_pos": 3,
            "type": "number",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": undefined,
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "type": "text",
  },
]
`;

exports[`test text.testcase.ts should parse "{"clozify_expect": [Function clozify_expect], "description": "Text with multiple newlines", "input": "Multiple


Newlines


", "main_expect": [Function main_expect], "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 0,
            "lexeme": "Multiple",
            "line_pos": 1,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 8,
      "lexeme": "
",
      "line_pos": 1,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 0,
      "lexeme": "
",
      "line_pos": 2,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 0,
      "lexeme": "
",
      "line_pos": 3,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [
          {
            "col_pos": 0,
            "lexeme": "Newlines",
            "line_pos": 4,
            "type": "text",
          },
        ],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 8,
      "lexeme": "
",
      "line_pos": 4,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 0,
      "lexeme": "
",
      "line_pos": 5,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "type": "text",
  },
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [],
        "type": "text",
      },
    ],
    "endingNewline": {
      "col_pos": 0,
      "lexeme": "
",
      "line_pos": 6,
      "type": "newline",
    },
    "indent": IndentNode {
      "indent": undefined,
      "type": "indent",
    },
    "type": "text",
  },
]
`;

exports[`test text.testcase.ts should parse "{"clozify_expect": [Function clozify_expect], "description": "Whitespace characters", "input": " 	 ", "main_expect": [Function main_expect], "parse_expect": [Function parse_expect], "tokenize_expect": [Function tokenize_expect]}" correctly 1`] = `
[
  TextLineNode {
    "contents": [
      TextNode {
        "contents": [],
        "type": "text",
      },
    ],
    "endingNewline": undefined,
    "indent": IndentNode {
      "indent": {
        "col_pos": 0,
        "lexeme": " 	 ",
        "line_pos": 1,
        "type": "whitespace",
      },
      "type": "indent",
    },
    "type": "text",
  },
]
`;
